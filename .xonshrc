# **Imports**
#==========================================================
import xonsh
from prompt_toolkit.keys import Keys
from prompt_toolkit.filters import Condition, EmacsInsertMode, ViInsertMode
import os
import sys
import autogen
from llmConsole import *

if getattr(sys, 'frozen', False):
    $HOME = os.path.dirname(sys.executable)
else:
    $HOME = os.path.dirname(os.path.realpath(__file__))

cd $HOME

        
# **Completion crash workaround**
#==========================================================
#completer remove skip
if (sys.platform == 'win32'):
    completer remove bash


# **Environment**
#==========================================================
sep = os.path.sep
xonsh.xonfig.WELCOME_MSG = []
$XONSHRC_DIR             = [$HOME, '{}{}rc'.format($HOME,sep)]
$XONSH_CONFIG_DIR        = '{}{}config'.format($HOME,sep)
$USERPROFILE             = $HOME
$XONSH_DATA_DIR          = '{}{}data'.format($HOME,sep)
$XONSH_TRACEBACK_LOGFILE = '{}{}traceback.log'.format($XONSH_DATA_DIR,sep)

$AUTO_SUGGEST_IN_COMPLETIONS  = True
$XONSH_SHOW_TRACEBACK         = False
$XONSH_STORE_STDOUT           = False
$XONSH_STORE_STDIN            = True
$XONSH_HISTORY_MATCH_ANYWHERE = False
$COMPLETIONS_CONFIRM          = False
$XONSH_AUTOPAIR               = True
$XONSH_CACHE_EVERYTHING       = False
$XONSH_CACHE_SCRIPTS          = False
$COMPLETIONS_DISPLAY          = 'multi'
$COMPLETIONS_MENU_ROWS        = 12


# **LLM Console Initialization**
#==========================================================
LLM = llm()

#LLM.agents.create()
LLM.agents.create(**LLM.config.agent_tmplts['aware_llm'])
LLM.update_agent()

class store:
    # place llm initialized variable here to enable quick-chat with [ctrl]+[z]
    llm_inst = LLM
    code_ticker = 0
    code = []
    context_tracer = LLM.history.size()
    
    
# **Magics**
#==========================================================
def _up(args):
    if not args or len(args) < 1:
        args = [1]  # if args is None you can't index to it
    balloons = ('../' * int(args[0]))
    cd @(balloons)

def get_code():
    if LLM.history.change_tracker == 0:
        return
    LLM.history.change_tracker = 0
    start = 0
    code = []
    indx = 0
    for block in LLM.history.history[-1]['content'].split("```"):
        if not (indx % 2) == 0:
            code.append(block)
        indx += 1
    
    ret = []
    for block in code:
        code_arr = block.split('\n')
        if code_arr[0].lower() == 'python':
            x = code_arr.pop(0)
        ret.append('\n'.join(code_arr))
    store.code = ret

@xonsh.tools.unthreadable
def chat_shortcut(args):
    text = ' '.join(args)
    llm.chat(store.llm_inst, text)
aliases['chat'] = chat_shortcut

@events.on_ptk_create
def custom_keybindings(bindings, **kw):
    @bindings.add('c-w')
    def hotkeys_help(event):
        print('\n')
        print(' HOTKEYS:')
        print('[ctrl]+[z] : quick chat')
        print('[ctrl]+[x] : code from LLM as input (cycles if multiple code blocks returned)')
        print('[ctrl]+[l] : clear screen')
        print('[ctrl]+[w] : list hotkeys')
        print()
        event.cli.renderer.erase()

    # def llmChat(event):
    #     event.current_buffer.insert_text('chat! ')

    @bindings.add('c-z')
    def llmChat(event):
        event.current_buffer.insert_text('chat! ')

    @bindings.add('c-x')
    def enterCode(event):
        # store.buffer = event.current_buffer
        x = event.current_buffer.delete_before_cursor(600)
        get_code()
        if len(store.code) == 0:
            return

        try:
            code = store.code[store.code_ticker]
            store.code_ticker += 1
        except:
            store.code_ticker = 0
            code = store.code[store.code_ticker]
            store.code_ticker += 1

        event.cli.renderer.erase()
        event.current_buffer.insert_text(code)


# **Aliases and conflict removal**
#==========================================================
aliases['la'] = ['ls', '-a', '--color']
aliases['ll'] = ['ls', '-la', '--color']
aliases['up'] = _up

        
print('\npress [ctrl]+[w] to list hotkeys\n')
